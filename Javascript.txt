---------------- Get random value ----------------------
const getRandomValue = (min, max) => {
    return Math.floor(Math.random() * (max-min)) + min
}
------------------array---------------
list:[]
list.push('a')     -> them vao cuoi
list.unshift('a')  -> them vao dau
list.splice(index) -> remove item at index position

--------------------
new Date().toISOString() -> create id

--------test number--------
/^\d+$/.test(number) --> return boolean

---------web component example---------------
https://codepen.io/bradtraversy/pen/wvaXKoK

--------svg note-------------
<svg viewBox="0 0 100 100">
  <rect
    x="10" y="10" width="20%" height="20" fill="red" stroke="blue"
  />
  <path d="M 10 30 l 0 20 l 20 0"></path>
  <path d="M 10 60 C 20 80, 40 80, 50 60"></path>
</svg>

var shape = document.querySelector('.square');
var shapeLength = shape.getTotalLenght();
----------tbl width example--------
https://brainbell.com/javascript/making-resizable-table-js.html
-----header fixed----
document.getElementById("wrap").addEventListener("scroll", function(){
   var translate = "translate(0,"+this.scrollTop+"px)";
   this.querySelector("thead").style.transform = translate;
});
------------drag and drop ----------
https://htmldom.dev/drag-and-drop-table-column/
-----virtual dom example---
https://github.com/ycmjason-talks/2018-11-21-manc-web-meetup-4/tree/master/src/vdom
-------- event-----------
e.addEventListener(
    'click',
    e => {e.stopPropagation()},
    {capture: true} // {once:true}
)
-----------tabindex------------
*[tabindex]:focus {
    outline: 2px green solid;
}
*:focus {
   outline: blue solid 2px;
}
div:focus {outline: blue solid 2px;}
------console style-------
console.log(`%c ${a} %c$ {b}`,"font-weight:bold","color:green")
-----optional chaining-------
obj?.prop1?.prop2
obj.fnc?.()
obj.arr?.[idx]
----defer-----
----pointer event------
el.addEventListener("pointerdown",e => {
    el.setPointerCapture(e.pointerId)
    setPosition(e)
    el.addEventListener("pointermove",setPosition)
    el.addEventListener("pointerup",() => {
        // el.releasePointerCapture(e.pointerId)
        // el.hasPointerCapture(e.pointerId)
        el.removeEventListener("pointermove",setPosition)
    },{once:true})
})
---- arr to obj-------
const obj = arr.reduce((acc,word) => {acc[word]=word;return acc;},{})
---- Regexpression---
const regex = new RegExp('^.a.$')
regex.test('cat')
------sleep--------
const sleep = (duration) => {
    return new Promise(resolve => {
        setTimeout(resolve,duration)
    })
};
sleep(200).then(()=>{})
----randomNumberBetween----
const fnc = (min,max) => {return Math.floor(Math.random()*(max-min+1)+min);};

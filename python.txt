--- concat -----
a = 4
print("{} {}".format("a =", a))
--- get data type ----
print(type(data))
--- list ----
values = [1, 2, "aa", 4, 5]
print(values[0]) #1
print(values[-1]) #5
print(values[1:3]) # [2, 'aa']
values.insert(3,"bb")
print(values) # [1,2,aa,bb,4,5]
values.append("End") # add to end of list
values[2] = "aaa" # update
del values[0] # deleting
--- dicionary ---
dic = {"a" : 2, 4 : "aaa", "c" : "ccc"}
print(dic[4])
print(dic["c"])

dict2 = {}
dict2["a"] = "aaa"
dict2["b"] = "bbb"
dict2["c"] = "ccc"
print(dict2) #{'a': 'aaa', 'b': 'bbb', 'c': 'ccc'}
--- for loop ---
for i in range(1,5,2):
    print(i) # 1 3
--- class ----
class TestClass:
    num = 100
    def __init__(self, a, b):
        print("constructor 2")
        self.num1 = a
        self.num2 = b
    # func
    def getData(self):
        print("getData")
    def SumNum(self):
        return self.num1 + self.num2 + self.num

obj = TestClass(2,3) # constructor 2
obj.getData()        # getData
print(obj.num)       # 100
print(obj.num1)      # 2
print(obj.num2)      # 3
print(obj.SumNum())  # 105
----inheritance----
from dirName.fileName import TestClass
class ChildClass(TestClass):
    numz = 200
    def __init__(self):
        TestClass.__init__(self, 2, 10)
    def getAllData(self):
        return  self.numz + self.SumNum()
obj = ChildClass()
print(obj.getAllData()) # 312
----String----
str1 = "KobQDabcdefg.xyz"
str2 = "concat"
str3 = "KobQD"
print(str1[1]) # 0
print(str1[0:5]) # KobQD
print(str1+str2) # KobQDabcdefg.xyzconcat
print(str3 in str1) # True
var = str1.split(".")
print(var[0]) # KobQDabcdefg
print(var[1]) # xyz
str4 = "  test  "
print(str4.strip()) #trim space -> "test" (left trim: lstrip, right trim: rstrip)
----file read write---
--read
file = open('test.txt')
# print(file.read(5))
# print(file.readline())
# print(file.readline())
# line = file.readline()
# while line!="":
#     print(line)
#     line = file.readline()
for line in file.readlines():
    print(line)
file.close()
--write
with open('test.txt','r') as reader:
    content = reader.readlines() # read file and store all lines in list
    with open('test.txt','w') as writer:
        for line in reversed(content):
            writer.write(line)
---------Exception------------
・raise Exception("item count not matching")
. assert (items == 2)
. pass
・try:
    with open('unknown.txt', 'r') as reader:
        reader.read()
  except Exception as e:
    print(e)
  finally:
    print("cleaning up")
    
------extract table in pdf data -------
pip install tk
pip install ghostscript
pip install camelot-py

tables = camelot.read_pdf('test.pdf',page='1')
tables.export('out.csv',f='csv',compress=True)
tables[0].to_csv('out.csv')

-----pytest---------
from pytest import mark

@mark.abc
def test_zzz():
    assert True
    
pytest -m abc         => filter test with mark named as abc

---websocket server-----
import websockets
import asyncio

PORT = 1234
print("Server listening on Port" + str(PORT))

connected = set()

async def echo(websocket,path):
    print("A client just connected")
    connected.add(websocket)
    try:
        async for message in websocket:
            print("Received message from client:" + message)
            for conn in connected:
                if conn != websocket:
                    await conn.send("test")
            await websocket.send("zzz" + message)
    except websockets.exceptions.ConnectionClosed as e:
        print("A client just disconnected")
        print(e)
    finally:
        connected.remove(websocket)

start_server = websockets.serve(echo,"localhost",PORT)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()

----multi process shared-----
from multiprocessing import Process, Queue

def f(q):
    q.put([42, None, 'hello'])

if __name__ == '__main__':
    q = Queue()
    p = Process(target=f, args=(q,))
    p.start()
    print q.get()    # prints "[42, None, 'hello']"
    p.join()

-- dic
from multiprocessing import Process, Manager

def f(d):
    d[1] += '1'
    d['2'] += 2

if __name__ == '__main__':
    manager = Manager()

    d = manager.dict()
    d[1] = '1'
    d['2'] = 2

    p1 = Process(target=f, args=(d,))
    p2 = Process(target=f, args=(d,))
    p1.start()
    p2.start()
    p1.join()
    p2.join()

    print d
 
===>  {1: '111', '2': 6}

-------setTimeout----------
from threading import Timer

def twoArgs(arg1,arg2):
    print arg1
    print arg2
    print ""

def nArgs(*args):
    for each in args:
        print each

#arguments: 
#how long to wait (in seconds), 
#what function to call, 
#what gets passed in
r = Timer(1.0, twoArgs, ("arg1","arg2"))
s = Timer(2.0, nArgs, ("OWLS","OWLS","OWLS"))

r.start()
s.start()

-----------websocket thread sample-------
import websockets
import threading
import asyncio

async def hello(websocket, path):
    async for data in websocket:
        print(f"Received: '{data}'")
        await websocket.send(data)

def between_callback():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    ws_server = websockets.serve(hello, 'localhost', 8899)

    loop.run_until_complete(ws_server)
    loop.run_forever() # this is missing
    loop.close()

async def send_receive_message(uri):
    async with websockets.connect(uri) as websocket:
        await websocket.send('This is some text.')
        reply = await websocket.recv()
        print(f"The reply is: '{reply}'")

def client():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(send_receive_message('ws://localhost:8899'))
    loop.close()

if __name__ == "__main__":
    # daemon server thread:
    server = threading.Thread(target=between_callback, daemon=True)
    server.start()
    client = threading.Thread(target=client)
    client.start()
    client.join()
    
------------run pytest inside python-------
import pytest
pytest.main(args)
--
args_str = "-k test_myfavorite"
args = args_str.split(" ")
pytest.main(args)

-------------argument cmd-------------------
import sys

def hello(a,b):
    print "hello and that's your sum:", a + b

if __name__ == "__main__":
    a = int(sys.argv[1])
    b = int(sys.argv[2])
    hello(a, b)

-----pytest argument-------
# conftest.py
from pytest import fixture

def pytest_addoption(parser):
    parser.addoption(
        "--name",
        action="store"
    )

@fixture()
def name(request):
    return request.config.getoption("--name")

-----------jinjia-------
--py
from jinja2 import Enviroment, FileSystemLoader, select_autoescape
env = Enviroment(
    loader = FileSystemLoader("templates"),
    autoescape = select_autoescape()
)
context = {
    "thing": "Hello",
    "data":[
        {"name": "abc", "count": 123},
        {"name": "def", "count": 456}
    ]
}
template = env.get_template("one.html")
print(template.render(**context))

--template
{{ zzz }}
{% for row in data %} ..{{ row.name }}..{{ row.count }}... {% endfor %}
{% if loop.index is divisibleby 3 %} ....... {% endif %}
{% block main_body %} ....... {% endblock %}
{% extends "abc.html" %}
{% include "def.html" %}


------------selenium record----------
xvfb-run --listen-tcp --server-num 44 --auth-file /tmp/xvfb.auth -s "-ac -screen 0 1920x1080x24" python seltest.py &
export DISPLAY=:44
ffmpeg -f x11grab -video_size 1920x1080 -i :44 -codec:v libx264 -r 12 video.mp4

-----user input------
user_prompt = "Enter a todo:"
text = input(user_prompt)
print(text)

------py to exe-------
pip install pyinstaller
pyinstaller main.py --onefile
--> dist/main.exe

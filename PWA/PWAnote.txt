npm install --save-dev http-server@0.9

---safari capable----
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-status-bar-style" content="black">
<meta name="apple-mobile-web-app-title" content="PWATitleName">
<link rel="apple-touch-icon" href="/src/images/icons/apple-icon-144x144.png" sizes="144x144">
<link rel="apple-touch-icon" href="/src/images/icons/apple-icon-152x152.png" sizes="152x152">
.....


---service worker----
--app.js
if ('serviceWorker' in navigator) {
  navigator.serviceWorker
    //.register('/sw.js',scope:'/folder/')          -> scope service worker
    .register('/sw.js')
    .then(function() {
      console.log('Service worker registered!');
    });
}
-- unregister serviceWorker
navigator.serviceWorker.getRegistrations().then(function(registrations) {
 for(let registration of registrations) {
  registration.unregister()
} })
-- install banner
var deferredPrompt;
window.addEventListener('beforeinstallprompt',function(event){
  console.log('beforeinstallprompt fired')
  event.preventDefault();
  deferredPrompt = event;
  return false;
});
function openCreatePostModal() {
  createPostArea.style.display = 'block';
  if(deferredPrompt){
    deferredPrompt.prompt();
    deferredPrompt.userChoice.then(function(choiceResult){
      console.log(choiceResult.outcome);
      if(choiceResult.outcome === 'dismissed'){
        console.log('User cancelled installation');
      }else{
        console.log('User added to home screen');
      }
    });
    deferredPrompt = null;
  }
}
---sw.js
self.addEventListener('install',function(event){
  console.log('[Service Worker] Installing Service Worker ...', event);
});

self.addEventListener('activate',function(event){
  console.log('[Service Worker] Activating Service Worker ...', event);
  return self.clients.claim();
});

self.addEventListener('fetch',function(event){
  console.log('[Service Worker] Fetching Something ...', event);
  event.respondWith(fetch(event.request));
})



--unresign service worker--
navigator.serviceWorker.getRegistrations().then(function(registrations) {
 for(let registration of registrations) {
  registration.unregister()
} })

----promise---------
var promise = new Promise(function(resolve,reject){
  resolve('This is executed once!');
  //reject({code:500,message:'An error occured!'});
});

promise.then(function(text){
  return text;
}).then(function(newText){
  console.log(newText)   ---> This is executed once!
});

----cache------
const CACHE_STATIC_NAME = 'static-v4';
const CACHE_DYNAMIC_NAME = 'dynamic-v2';

self.addEventListener('install', function(event) {
  console.log('[Service Worker] Installing Service Worker ...', event);
  event.waitUntil(
    caches.open(CACHE_STATIC_NAME)
      .then(function(cache){
        console.log('[Service Worker] Precaching App Shell ....');
        return cache.addAll([
          '/',
          '/index.html',
          '/src/js/app.js',
          '/src/js/feed.js',
          '/src/js/promise.js',
          '/src/js/fetch.js',
          '/src/js/material.min.js',
          '/src/css/app.css',
          '/src/css/feed.css',
          '/src/images/main-image.jpg',
          'https://fonts.googleapis.com/css?family=Roboto:400,700',
          'https://fonts.googleapis.com/icon?family=Material+Icons',
          'https://cdnjs.cloudflare.com/ajax/libs/material-design-lite/1.3.0/material.indigo-pink.min.css'
        ]);
      })
  );
});

self.addEventListener('activate', function(event) {
  console.log('[Service Worker] Activating Service Worker ....', event);
  event.waitUntil(
    caches.keys()
      .then(function(keyList){
        return Promise.all(keyList.map(key => {
          if(key !== CACHE_STATIC_NAME && key !== CACHE_DYNAMIC_NAME){
            console.log('[Service Worker] Removing old cache',key);
            return caches.delete(key);
          }
        }))
      })
  )
  return self.clients.claim();
});

self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request)
      .then(function(response){
        if(response){
          return response;
        }else{
          return fetch(event.request)
            .then(function(res){
              return caches.open(CACHE_DYNAMIC_NAME)
                .then(function(cache){
                  cache.put(event.request.url,res.clone());
                  return res;
                })
            })
            .catch(function(err){
              return caches.open(CACHE_STATIC_NAME)
                .then(cache => {
                  return cache.match('/offline.html');
                })
            })
        }
      })
  );
});
--cache by click event
function onSaveButtonClicked(event) {
  console.log('clicked');
  if('caches' in window){
    caches.open('user-requested')
    .then(cache => {
      cache.add('https://httpbin.org/get');
      cache.add('/src/images/sf-boat.jpg');
    })
  }
}

-- return offline.html when page is not been cached
self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request)
      .then(function(response) {
        if (response) {
          return response;
        } else {
          return fetch(event.request)
            .then(function(res) {
              return caches.open(CACHE_DYNAMIC_NAME)
                .then(function(cache) {
                  cache.put(event.request.url, res.clone());
                  return res;
                })
            })
            .catch(function(err) {
              return caches.open(CACHE_STATIC_NAME)
                .then(cache => {
                  return cache.match('/offline.html')
                })
            });
        }
      })
  );
});
-----------workbox---------------
npm: workbox-cli -> "generate-sw":"workbox generate:sw",
"swSrc":"sw-base.js" => "workbox inject:manifest"

importScript('workbox-sw.prod.v...js');
const workboxSW = new self.WorkboxSW();

workboxSW.router.registerRoute(/.*(?:googleapis|gstatic)\.com.*$/,workboxSW.strategies.staleWhileRevalidate({
  cacheName:'google-fonts'
}));
workboxSW.precache([]);






---draggable element-----
https://codepen.io/WebDevSimplified/pen/JjdveeV

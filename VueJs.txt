const app = Vue.createApp({});
app.mount('#events');

<a v-bind:href="vueLink" >about Vue</a>
v-on:keyup.enter="confirmOut2"
--------------------------
<input type="text" v-bind:value="name" v-on:input="setName($event, 'ZZZ')">
== 
<input type="text" v-model="name">
--------------------------
「v-on:click」 === 「@click」
「v-bind:value="..."」   === 「:value="..."」
---------------------------
<input type="text" v-model="userInput2" />
<p :style="{backgroundColor:userInput2}">Style me inline!</p>
-----------------------------
v-if // v-else-if // v-else
v-show
<li v-for="goal in goals" >{{ goal }}</li>
-------------------------------
<p :class="styleClass1">
-->
 computed:{
        styleClass1(){
            return{
                user1:this.userInput1 === 'user1',
                user2:this.userInput1 === 'user2',
                visible:this.pToggle,
                hidden:!this.pToggle
            }
        }
}
----------------------REF-------------------
<input type="text" v-model="userInput2" />
-->

<input type="text" ref="userText" />

saveInput(){
    // console.dir(this.$refs.userText);
    this.text = this.$refs.userText.value;
}
------------------Obj lifecycle-------------------
beforeCreate(){}   --> created(){}
beforeMount(){}     --> mounted(){}
beforeUpdate(){}   --> updated(){}
beforeUnmount(){} --> unmounted(){}
app.unmount();
----------------Vue CLI------------------------
npm install -g @vue/cli
vue create vue-first-app
cd vue-first-app
npm run serve

visual studio code extension :vetur, volar
------------------------------------------------
props:[
  propName:{
    type:String,
    required : true,
    default: '0',
    validator: function(value){
      return value === '1' || value === '0';
    }
 }
]
emit:['set-user']
<form @submit.prevent="$emit('set-user',enteredName,enteredAge)">
<div @click="$emit('set-user')"></div>
------------provide - inject------------------
provide(){
    return{
      topics:this.topics
    }
  }

inject:['topics']
-------------component----------------
app.component('the-header', TheHeader);
==>
components:{
    //'the-header':TheHeader  -> <the-header></the-header>
    TheHeader:TheHeader       -> <TheHeader />
  }

--------------slot------------------
1--base-card--
<template>
  <div>
    <header v-if="$slots.header">
      <slot name="header">
        <!-- <h2>The Default</h2> -->
      </slot>
    </header>
    <slot></slot>
  </div>
</template>

---->>
<base-card>
  <template v-slot:header>
    <h3>{{ fullName }}</h3>
    <base-badge :type="role" :caption="role.toUpperCase()"></base-badge>
  </template>
  <template v-slot:default>
    <p>{{ infoText }}</p>
  </template>
</base-card>

<template v-slot:header> === <template #header>


2--course-goals--
<template>
  <ul>
    <li v-for="goal in goals" :key="goal">
      <slot :item="goal" another-prop="..." ></slot>
    </li>
  </ul>
</template>

<script>
export default {
  data(){
    return{
      goals:['Finish the course','Learn Vue']
    }
  }
}
------>>
<course-goals>
  <template #default="slotProps">
    <h2>{{ slotProps.item }}</h2>
    <p>{{ slotProps.anotherProp }}</p>
  </template>
</course-goals>

===

<course-goals #default="slotProps">
  <h2>{{ slotProps.item }}</h2>
  <p>{{ slotProps.anotherProp }}</p>
</course-goals>

--------------component------------------
<keep-alive> --> keep state
  <component :is="selectedComponent"></component>
</keep-alive>
--------------teleport------------------
<teleport to="body">
  content...
</teleport>
------------v-model in custom component-------
export default {
  props:['modelValue'],
  emits:['update:modelValue']
}

this.$emit('update:modelValue',val); --> set modelValue = val

-------fetch-axios------------
fetch('url', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    name: this.enteredName,
    rating: this.chosenRating,
  }),
});
--- GET
fetch('url').then((response)=>{
  if(response.ok){
    return response.json();
  }
}).then((data)=>{
  const results = [];
  for(const id in data){
    results.push({
      id:id,
      name:data[id].name,
      rating:data[id].rating
    })
  }
  this.results = results;
})

---------
import axios from 'axios'; // at the start of your <script> tag, before you "export default ..."
...
axios.post('url', {
  name: this.enteredName,
  rating: this.chosenRating,
});
----------Err Handle---
fetch()
.then(response => {
  if(response.ok){
    //...
  }else{
    throw new Error('Could not save data!');
  }
}).catch(error => {
  console.log(error);
  this.error = error.message;
});
fetch khong catch response error nhung axios thi co.

---------------Router----------------
install : npm install --save vue-router@next
import {createRouter,createWebHistory} from 'vue-router';
const router = createRouter({
  history: createWebHistory(),
  routes:[
    //{path:'/teams',component:TeamsList,alias:'/'}, --> url not redirect
    {path:'/',redirect:'/teams'},
    //{path:'/teams',component:TeamsList},
    {
      name:'team',
      path:'/teams',
      component:TeamsList,
      children:[
        {name:'team-members',path:':teamId',component:TeamMember,props:true} // /teams/t1
      ]
    },
    //{path:'/users',component:UsersList},
    {path:'/users',components:{default:UsersList,footer:UsersFooter}},
    //{path:'/teams/:teamId',component:TeamMember,props:true}, --> const teamId = this.$route.params.teamId;
    {path:'/:notFound(.*)',redirect:'/teams'}
  ],
  linkActiveClass:'active',
  scrollBehavior(to,from,savedPosition){
    if(savedPosition){
      return savedPosition;
    }
    return{left:0,top:0}
  }
});
~~~~~~~~~~~~~~
<router-view></router-view> --> default
<router-view name="footer"></router-view>
<router-link to="/teams">Teams</router-link>

computed:{
    teamMembersLink(){
      return{name:'team-members',params:{teamId:this.id},query:{sort:'asc'}}
    }
  }
this.$router.push({name:'team-members',params:{teamId:this.id}});

--in javascript
this.$router.push('/teams');
this.$router.forward();
this.$router.back();
this.$route.path --> current url
this.$route.query;

-- router guard
(main.js)
router.beforeEach(function(to,from,next){
  if(to.name === 'team-members'){
    next();
  }else{
    next({name:'team-members',params:{teamId:'t2'}});
  }
})
router.afterEach(function(to,from){...})
hoac dung local khi dinh nghia path router
{
  path:'/users',
  components:{
    default:UsersList,
    footer:UsersFooter
  },
  beforeEnter(to,from,next){
    next();
  }
},
hoac dung trong component bang beforeRouteEnter
beforeRouteEnter (to, from, next) {next();}
beforeRouteUpdate(to, from, next){next();}

beforeRouteLeave (to, from, next) {
  if(this.changesSaved){
    next();
  }else{
    const userWantsToLeave = confirm('Are you sure? You got unsaved changes!');
    next(userWantsToLeave);
  }
}
-- route meta field
{
  name:'teams',
  path:'/teams',
  meta:{needsAuth:true},
  components:{default:TeamsList,footer:TeamsFooter},
  children:[
    {name:'team-members',path:':teamId',component:TeamMember,props:true} // /teams/t1
  ]
}
router.beforeEach(function(to,from,next){
  if(to.meta.needsAuth){
    console.log('NeedsAuth')
    next();
  }else{
    next();
  }
})

-----------Animation------------
<transition>content</transition> 
-- for one root element 
<style>
.v-enter-from{                           .v-leave-from{
  opacity: 0;                              opacity: 1;
  transform: translateY(-30px);            transform: translateY(0);
}                                        }
.v-enter-active{                         .v-leave-active{
  transition: all 0.3s ease-in;            transition: all 0.3s ease-in;
}                                        }
.v-enter-to{                             .v-leave-to{
  opacity: 1;                              opacity: 0;
  transform: translateY(0);                transform: translateY(-30px);
}                                        }
</style>

--@keyframes
<style>
.v-enter-active{
  animation: modal 0.3s ease-out;
}
.v-leave-active{
  animation: modal 0.3s ease-in reverse;
}

@keyframes modal {
  from {
    opacity: 0;
    transform: translateY(-50px) scale(0.9);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}
</style>

--
<transition name="para">content</transition>
--> para-enter-from   para-enter-active   para-enter-to ...

--
<transition enter-to-class="..." enter-active-class="...">content</transition>

--for multi element if make sure only one element be showed
<transition name="fade-button" mode="out-in">
  <button @click="showUsers" v-if="!usersAreVisible">Show Users</button>
  <button @click="hideUsers" v-else>Hide Users</button>
</transition>

-- events
<transition
  name="para"
  :css="false" --> when not use css transition, optimize performance
  @before-enter="beforeEnter"
  @enter="enter"
  @after-enter="afterEnter"
  @before-leave="beforeLeave"
  @leave="leave"
  @after-leave="afterLeave"
  @enter-cancelled="enterCancelled"
  @leave-cancelled="leaveCancelled"
>
  <p v-if="paraIsVisible">This is only sometimes visible...</p>
</transition>

others library:https://greensock.com/

-- javascript css
enter(el,done){
  console.log('enter')
  let round = 1;
  this.enterInterval = setInterval(()=>{
    el.style.opacity = round*0.01;
    round++;
    if(round>100){
      clearInterval(this.enterInterval)
      done();
    }
  },20)
}

--transition list
<transition-group tag="ul" name="user-list">
  <li v-for="user in users" :key="user" @click="removeUser(user)">{{ user }}</li>
</transition-group>

.user-list-enter-from{                .user-list-leave-from{
  opacity: 0;                           opacity: 1;
  transform: translateX(-30px);         transform: translateX(0);
}                                     }
.user-list-enter-active{              .user-list-leave-active{
  transition: all 1s ease-out;          transition: all 1s ease-in;
}                                       position: absolute;
.user-list-enter-to{                  }
  opacity: 1;                         .user-list-leave-to{
  transform: translateX(0);             opacity: 0;
}                                       transform: translateX(30px);
                                      }
.user-list-move{
  transition: transform 0.8s ease;
}

-- route transition
<router-view v-slot="slotProps">
  <transition name="route" mode="out-in">
    <component :is="slotProps.Component"></component>
  </transition>
</router-view>

-----------------Vuex---------------------
install: npm install --save vuex@next

import { createStore } from 'vuex';
const store = createStore({
  state(){
    return{
      counter:0
    };
  },
  mutations:{
    increment(state){
      state.counter = state.counter + 2;
    },
    increase(state,payload){
      state.counter = state.counter + payload.value;
    }
  },
  actions:{
    increment(context){
      setTimeout(()=>{
        context.commit('increment');
      },2000)
    },
    increase(context,payload){
      context.commit('increase',payload);
    }
  },
  getters:{
    finalCounter(state){
      return state.counter * 3;
    },
    normalizedCounter(state,getters){
      return getters.finalCounter + 100;
    }
  }
});
app.use(store);

--use
this.$store.state.counter;
this.$store.commit('increment');
this.$store.commit('increase',{value:10});
this.$store.getters.finalCounter;
this.$store.dispatch('increment');
this.$store.dispatch('increase',{value:10}); --or
this.$store.dispatch({
  type:'increase',
  value:10
});

-- mapGetters
import { mapGetters } from "vuex";
export default {
  computed:{
    ...mapGetters(['finalCounter'])
  }
}

-- mapActions
import { mapActions } from 'vuex'
export default {
  methods:{
    ...mapActions(['increment','increase'])
  }
}
OR
export default {
  methods:{
    ...mapActions({
      inc: 'increment',
      ins: 'increase'
    })
  }
}

--modules
const extraModule = {
  namespaced:true, -- namespace --> example: $store.getters['extra/getterName']
  state(){},
  mutations:{},
  actions:{},
  getters:{}
}

const store = createStore({
  modules:{extra:extraModule} -- merge another module --> $store.getters['extra/getterName']
  state(){},
  mutations:{},
  actions:{},
  getters:{}
}
...mapGetters('extra',['finalCounter'])
...mapGetters({
  exampleGetter: 'myModule1/exampleGetter',
  anotherGetter: 'myModule2/anotherGetter',
})
...mapActions('extra',{inc:'increment',ins:'increase'})
this.$store.dispatch({
        type:'extra/increase',
        value:10
      });

-- rootState,rootGetters
getters:{
  testAuth(state,getters,rootState,rootGetters){}
}